from typing import Dict, Union
from typing import List

from lowerpines.endpoints.message import Message
from lowerpines.gmi import GMI


class MessageManager:
    gmi = ... #  type: GMI

    def __init__(self, gmi: GMI) -> None: ...
    def get(self, group_id: str, message_id: str) -> Message: ...


class MessageAttach:
    def __add__(self, other: Union[ComplexMessage, 'MessageAttach', str]) -> ComplexMessage: ...
    def __radd__(self, other: str) -> ComplexMessage: ...


class RefAttach(MessageAttach):
    display = ... #  type: str

    def __init__(self, user_id: str, display: str=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...


class ImageAttach(MessageAttach):
    def __init__(self, image_url: str) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...


class LocationAttach(MessageAttach):
    name = ... #  type: str

    def __init__(self, name: str, lat: str, long: str) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...


class SplitAttach(MessageAttach):
    token = ... #  type: str

    def __init__(self, token: str) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...


EMOJI_PLACEHOLDER = ...


class EmojiAttach(MessageAttach):
    def __init__(self, pack_id: str) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...


class ComplexMessage:
    contents = ... #  type: List[Union[str, MessageAttach]]

    def __init__(self, data: Union[List[Union[str, MessageAttach]], str, MessageAttach]) -> None: ...
    def __add__(self, other: Union['ComplexMessage', str, MessageAttach]) -> 'ComplexMessage': ...
    def __radd__(self, other: str) -> 'ComplexMessage': ...
    def __str__(self) -> str: ...
    def get_text(self) -> str: ...
    def get_attachments(self) -> List[Dict]: ...
    def just_str(self) -> str: ...
